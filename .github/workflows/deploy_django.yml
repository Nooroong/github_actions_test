name: Django CI

on:
  push:
    branches:
      - main
      - develop
jobs:
  ci:
    name: 'Django CI'
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.12.3, 3.10]

    steps:
    # 레포의 소스코드를 복사
    - uses: actions/checkout@v3

    # 파이썬 설치
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    # 파이썬 패키지 설치
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # env 파일 생성
    - name: create-env
      id: create-env
      run: echo "$ENV_FILE" > .
      shell: bash
      env:
        ENV_FILE: ${{ secrets.ENV_FILE }}
    
    # 실행 테스트
    - name: Run Tests
      run: |
        python manage.py test
  # cd:
  #   name: 'Django CD'
  #   needs: ci
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: EC2 ssh connection test
  #     uses: appleboy/ssh-action@master
  #     with:
  #       host: ${{ secrets.SSH_HOST }}     # 연결할 EC2 
  #       username: ${{ secrets.SSH_USERNAME }} # 사용자
  #       key: ${{ secrets.SSH_PEM }}       # pem 파일 내용
  #       command_timeout: 3m           # timeout 시간 설정
  #       script: |
  #         sudo apt-get update
  #         sudo apt-get -y upgrade
  #         cd {프로젝트 폴더 위치}
  #         source {가상환경 이름}/bin/activate
  #         git pull
  #         sudo lsof -t -i tcp:8000 | xargs kill -9
  #         pip install -r requirements.txt
  #         python manage.py makemigrations 
  #         python manage.py migrate
  #         nohup gunicorn --bind 0.0.0.0:8000 {django 프로젝트명}.wsgi > nohup.out 2> nohup.err < /dev/null &
  #         exit 0